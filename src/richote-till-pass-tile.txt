
  TwoDRObject tileLeft = TwoDRObject(3, 11, oledDisplay);
    TwoDRObject tileRight = TwoDRObject(3, 11, oledDisplay);

    tileLeft.draw({15, OLED_HEIGHT / 2 - 1}, C);
    tileRight.draw({OLED_WIDTH - 15 - 1, OLED_HEIGHT / 2 - 1}, C);

    TwoDRObject topBorder = TwoDRObject(OLED_WIDTH - 1, 1, oledDisplay);
    TwoDRObject bottomBorder = TwoDRObject(OLED_WIDTH - 1, 1, oledDisplay);
    TwoDRObject leftBorder = TwoDRObject(1, OLED_HEIGHT - 2 - 1, oledDisplay);
    TwoDRObject rightBorder = TwoDRObject(1, OLED_HEIGHT - 2 - 1, oledDisplay);

    topBorder.draw({0, 0}, TL);
    bottomBorder.draw({0, OLED_HEIGHT - 1}, TL);
    leftBorder.draw({0, 1}, TL);
    rightBorder.draw({OLED_WIDTH - 1, 1}, TL);

    TwoDRObject pixelBall = TwoDRObject(5, 5, oledDisplay);
    pixelBall.draw({OLED_WIDTH / 2, OLED_HEIGHT / 2}, C);

    oledDisplay.display();

    bool isDiagonalRandomTime = false;

    uint8_t currentDirection;

    while (true) {
        if (isDiagonalRandomTime) {
            currentDirection = random(4, 8);
        } else {
            currentDirection = random(0, 4);
        }

        while (!pixelBall.isMoveCollision(topBorder, currentDirection) && !pixelBall.isMoveCollision(bottomBorder, currentDirection) && !pixelBall.isMoveCollision(leftBorder, currentDirection) && !pixelBall.isMoveCollision(rightBorder, currentDirection) && !pixelBall.isMoveCollision(tileLeft, currentDirection) && !pixelBall.isMoveCollision(tileRight, currentDirection)) {

            if (!pixelBall.isFront(tileLeft) && !pixelBall.isBehind(tileLeft)) {
                Serial.println("Left lose!");
                return;
            }

            if (!tileRight.isFront(pixelBall) && !tileRight.isBehind(pixelBall)) {
                Serial.println("Right lose!");
                return;
            }

            pixelBall.move(currentDirection);
            oledDisplay.display();
            delayMicroseconds(500);
        }

        isDiagonalRandomTime = !isDiagonalRandomTime;
    }